import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:logger/logger.dart';
import '../models/user.dart';

class JwtService {
  static const String _tokenKey = 'auth_token';
  static const String _userKey = 'user_data';
  final Logger _logger = Logger(
    printer: PrettyPrinter(
      methodCount: 0,
      errorMethodCount: 5,
      lineLength: 50,
      colors: true,
      printEmojis: true,
      // ignore: deprecated_member_use
      printTime: true,
    ),
  );

  // Sauvegarder le token JWT
  Future<void> saveToken(String token) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_tokenKey, token);
      _logger.i('‚úÖ Token JWT sauvegard√© avec succ√®s');
    } catch (e) {
      _logger.e('‚ùå Erreur lors de la sauvegarde du token JWT', error: e);
      rethrow;
    }
  }

  // R√©cup√©rer le token JWT
  Future<String?> getToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString(_tokenKey);
      if (token != null) {
        _logger.i('‚úÖ Token JWT r√©cup√©r√© avec succ√®s');
      } else {
        _logger.w('‚ö†Ô∏è Aucun token JWT trouv√©');
      }
      return token;
    } catch (e) {
      _logger.e('‚ùå Erreur lors de la r√©cup√©ration du token JWT', error: e);
      return null;
    }
  }

  // Sauvegarder les donn√©es utilisateur
  Future<void> saveUser(User user) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_userKey, jsonEncode(user.toJson()));
      _logger.i(
        '‚úÖ Donn√©es utilisateur sauvegard√©es avec succ√®s',
          error: user.toJson(),
      );  
    } catch (e) {
      _logger.e(
        '‚ùå Erreur lors de la sauvegarde des donn√©es utilisateur',
        error: e,
      );
      rethrow;
    }
  }

  // R√©cup√©rer les donn√©es utilisateur
  Future<User?> getUser() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final userJson = prefs.getString(_userKey);
      if (userJson != null) {
        final user = User.fromJson(jsonDecode(userJson));
        _logger.i(
          '‚úÖ Donn√©es utilisateur r√©cup√©r√©es avec succ√®s',
          error: user.toJson(),
        );
        return user;
      }
      _logger.w('‚ö†Ô∏è Aucune donn√©e utilisateur trouv√©e');
      return null;
    } catch (e) {
      _logger.e(
        '‚ùå Erreur lors de la r√©cup√©ration des donn√©es utilisateur',
        error: e,
      );
      return null;
    }
  }

  // V√©rifier si l'utilisateur est connect√©
  Future<bool> isAuthenticated() async {
    try {
      final token = await getToken();
      final isAuth = token != null;
      _logger.i(
        'üîç √âtat d\'authentification: ${isAuth ? "Connect√©" : "Non connect√©"}',
      );
      return isAuth;
    } catch (e) {
      _logger.e(
        '‚ùå Erreur lors de la v√©rification de l\'authentification',
        error: e,
      );
      return false;
    }
  }

  // D√©connexion
  Future<void> logout() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_tokenKey);
      await prefs.remove(_userKey);
      _logger.i('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      _logger.e('‚ùå Erreur lors de la d√©connexion', error: e);
      rethrow;
    }
  }

  // D√©coder le token JWT
  Map<String, dynamic>? decodeToken(String token) {
    try {
      final parts = token.split('.');
      if (parts.length != 3) {
        _logger.w('‚ö†Ô∏è Token JWT mal form√©');
        return null;
      }

      final payload = parts[1];
      final normalized = base64Url.normalize(payload);
      final resp = utf8.decode(base64Url.decode(normalized));
      final payloadMap = json.decode(resp);
      _logger.i('‚úÖ Token JWT d√©cod√© avec succ√®s', error: payloadMap);
      return payloadMap;
    } catch (e) {
      _logger.e('‚ùå Erreur lors du d√©codage du token JWT', error: e);
      return null;
    }
  }

  // V√©rifier si le token est expir√©
  bool isTokenExpired(String token) {
    try {
      final decodedToken = decodeToken(token);
      if (decodedToken == null) {
        _logger.w(
          '‚ö†Ô∏è Impossible de v√©rifier l\'expiration du token - token invalide',
        );
        return true;
      }

      final expiry = decodedToken['exp'] as int?;
      if (expiry == null) {
        _logger.w(
          '‚ö†Ô∏è Impossible de v√©rifier l\'expiration du token - pas de date d\'expiration',
        );
        return true;
      }

      final expiryDate = DateTime.fromMillisecondsSinceEpoch(expiry * 1000);
      final isExpired = DateTime.now().isAfter(expiryDate);
      _logger.i(
        'üîç √âtat d\'expiration du token: ${isExpired ? "Expir√©" : "Valide"}',
      );
      return isExpired;
    } catch (e) {
      _logger.e(
        '‚ùå Erreur lors de la v√©rification de l\'expiration du token',
        error: e,
      );
      return true;
    }
  }
}
